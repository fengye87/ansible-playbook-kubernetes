- hosts: all
  tasks:
    - name: Setting hostname
      hostname:
        name: "{{ inventory_hostname }}"
      become: true

    - name: Installing required packages (Debian)
      apt:
        name:
          - curl
          - gpg
        update_cache: true
      become: true
      when: ansible_os_family == 'Debian'

    - name: Disabling SELinux at boot (RedHat)
      selinux:
        state: disabled
      become: true
      when: ansible_os_family == 'RedHat'

    - name: Stopping SELinux (RedHat)
      command: setenforce 0
      become: true
      when: ansible_os_family == 'RedHat'

    - name: Getting list of services
      service_facts:
      become: true

    - name: Stopping firewalld and disabling it at boot
      systemd:
        name: firewalld
        state: stopped
        enabled: false
      become: true
      when:
        - "'firewalld.service' in ansible_facts.services"
        - ansible_facts.services['firewalld.service'].status != 'not-found'

    - name: Stopping swap
      command: swapoff -a
      become: true

    - name: Disabling swap at boot
      replace:
        path: /etc/fstab
        regexp: ^([^#].*\sswap\s.*)$
        replace: '# \1'
      become: true

    - name: Disabling swap.target (Debian)
      systemd:
        name: swap.target
        masked: true
      become: true
      when: ansible_os_family == 'Debian'

    - name: Enabling required kernel modules at boot
      lineinfile:
        path: /etc/modules-load.d/containerd.conf
        line: "{{ item }}"
        create: true
      loop:
        - overlay
        - br_netfilter
      become: true

    - name: Loading required kernel modules
      modprobe:
        name: "{{ item }}"
      loop:
        - overlay
        - br_netfilter
      become: true

    - name: Setting required sysctl params
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
      loop:
        - name: net.bridge.bridge-nf-call-iptables
          value: "1"
        - name: net.bridge.bridge-nf-call-ip6tables
          value: "1"
        - name: net.ipv4.ip_forward
          value: "1"
      become: true

    - name: Adding Docker repository (RedHat)
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
      become: true
      when: ansible_os_family == 'RedHat'

    - name: Replacing $releasever with 7 in Docker repository file (openEuler)
      replace:
        path: /etc/yum.repos.d/docker-ce.repo
        regexp: \$releasever
        replace: "7"
      become: true
      when: ansible_distribution == 'openEuler'

    - name: Creating Apt keyrings directory (Debian)
      file:
        path: /etc/apt/keyrings
        state: directory
      become: true
      when: ansible_os_family == 'Debian'

    - name: Adding Docker repository (Debian)
      shell:
        cmd: |
          set -euxo pipefail
          curl -fsSL https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg -o /etc/apt/keyrings/docker.asc
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/{{ ansible_distribution | lower }} $(. /etc/os-release && echo "$VERSION_CODENAME") stable" > /etc/apt/sources.list.d/docker.list
        executable: /bin/bash
        creates: /etc/apt/sources.list.d/docker.list
      become: true
      when: ansible_os_family == 'Debian'

    - name: Installing containerd (RedHat)
      yum:
        name: containerd.io
      become: true
      register: install_containerd_redhat
      when: ansible_os_family == 'RedHat'

    - name: Installing containerd (Debian)
      apt:
        name: containerd.io
        update_cache: true
      become: true
      register: install_containerd_debian
      when: ansible_os_family == 'Debian'

    - name: Starting containerd and enabling it at boot
      systemd:
        name: containerd
        state: started
        enabled: true
      become: true

    - name: Getting containerd default config
      command: containerd config default
      register: get_containerd_default_config
      when: install_containerd_redhat.changed or install_containerd_debian.changed

    - name: Setting containerd config
      copy:
        content: "{{ get_containerd_default_config.stdout }}"
        dest: /etc/containerd/config.toml
      become: true
      register: set_containerd_config
      when: install_containerd_redhat.changed or install_containerd_debian.changed

    - name: Setting containerd cgroup driver to systemd
      replace:
        path: /etc/containerd/config.toml
        regexp: SystemdCgroup = false
        replace: SystemdCgroup = true
      become: true
      register: set_containerd_cgroup_driver

    - name: Restarting containerd
      systemd:
        name: containerd
        state: restarted
      become: true
      when: set_containerd_config.changed or set_containerd_cgroup_driver.changed

    - name: Setting Kubernetes version
      set_fact:
        k8s_version: "{{ k8s_version | default('1.32') }}"

    - name: Adding Kubernetes repository (RedHat)
      copy:
        content: |
          [kubernetes]
          name=Kubernetes
          baseurl=https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/rpm/
          enabled=1
          gpgcheck=1
          gpgkey=https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/rpm/repodata/repomd.xml.key
          exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
        dest: /etc/yum.repos.d/kubernetes.repo
      become: true
      when: ansible_os_family == 'RedHat'

    - name: Adding Kubernetes repository (Debian)
      shell:
        cmd: |
          set -euxo pipefail
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg --yes
          echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
        executable: /bin/bash
        creates: /etc/apt/sources.list.d/kubernetes.list
      become: true
      when: ansible_os_family == 'Debian'

    - name: Installing Kubernetes packages (RedHat)
      yum:
        name:
          - kubelet
          - kubeadm
          - kubectl
        disable_excludes: kubernetes
      become: true
      when: ansible_os_family == 'RedHat'

    - name: Installing Kubernetes packages (Debian)
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        update_cache: true
      become: true
      when: ansible_os_family == 'Debian'

    - name: Starting kubelet and enabling it at boot
      systemd:
        name: kubelet
        state: started
        enabled: true
      become: true

    - name: Initializing Kubernetes master node
      command:
        cmd: kubeadm init {{ k8s_kubeadm_init_extra_args | default('') }}
        creates: /etc/kubernetes/admin.conf
      become: true
      when: k8s_role == 'master'

    - name: Getting kubeconfig
      slurp:
        src: /etc/kubernetes/admin.conf
      become: true
      register: get_kubeconfig
      when: k8s_role == 'master'

    - name: Creating kubeconfig directory
      file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
      when: k8s_role == 'master'

    - name: Copying kubeconfig
      copy:
        content: "{{ get_kubeconfig.content | b64decode }}"
        dest: "{{ ansible_env.HOME }}/.kube/config"
        mode: 0600
      when: k8s_role == 'master'

    - name: Allowing pods on master node
      command: kubectl taint nodes --all node-role.kubernetes.io/"{{ item }}"-
      loop:
        - master
        - control-plane
      when: k8s_role == 'master'
      failed_when: false

    - name: Fetching kubeconfig
      fetch:
        src: /etc/kubernetes/admin.conf
        dest: kubeconfig
        flat: true
      become: true
      when: k8s_role == 'master'

    - name: Getting kubeadm join command
      command: kubeadm token create --print-join-command
      become: true
      when: k8s_role == 'master'
      register: get_kubeadm_join_command

    - name: Setting kubeadm join command globally
      set_fact:
        kubernetes_join_command: "{{ get_kubeadm_join_command.stdout }}"
      when: get_kubeadm_join_command.stdout is defined
      delegate_to: "{{ item }}"
      delegate_facts: true
      with_items: "{{ groups['all'] }}"

    - name: Joining Kubernetes node
      command:
        cmd: "{{ kubernetes_join_command }}"
        creates: /etc/kubernetes/kubelet.conf
      become: true
      when: k8s_role == 'node'
